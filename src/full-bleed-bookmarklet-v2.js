// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function() {
    'use strict';
    var $internalPrototype, $overlay, $prototypeDiv, $settingCheckbox, $settingDiv, $settingTextbox, CONFIG, doneValues, labelText, name, prototypeConfig, prototypeIndex, prototypeName, qs, queryStringObj, setting, settings, value, _ref;
    if (typeof NYTD === "undefined") {
      window.NYTD = {};
    }
    window.NYTD.InternalPrototype = {};
    CONFIG = {
      "prototypes": {
        "Full Bleed": {
          "on": true,
          "settings": {
            "safezone": "1,2,3,4",
            "image": ""
          }
        }
      }
    };
    window.NYTD.InternalPrototype.reload = function() {
      var name, queryStringObj;
      console.log("reload");
      $('.internalPrototype-prototype').each(function() {
        var name;
        name = $(this).find('.prototypename').text();
        if ($(this).find("input[type=checkbox]").prop("checked")) {
          console.log('found', this);
          return $(this).find('.internalPrototype-prototype-setting').each(function() {
            var settingname, val;
            console.log($(this).find('input[type=text]').val());
            val = $(this).find('input[type=text]').val();
            console.log(name);
            console.log($(this).find('.settingname').text());
            settingname = $(this).find('.settingname').text();
            console.log(CONFIG.prototypes[name].settings[settingname]);
            return CONFIG.prototypes[name].settings[settingname] = val;
          });
        }
      });
      for (name in CONFIG.prototypes) {
        if (CONFIG.prototypes[name].on) {
          queryStringObj = {
            prototype: name,
            on: CONFIG.prototypes[name].on,
            settings: decodeURIComponent(JSON.stringify(CONFIG.prototypes[name].settings))
          };
        }
      }
      return location.search = decodeURIComponent(queryString.stringify(queryStringObj));
    };
    if (location.search) {
      qs = queryString.parse(location.search);
      settings = JSON.parse(qs.settings);
    } else {
      for (name in CONFIG.prototypes) {
        if (CONFIG.prototypes[name].on) {
          queryStringObj = {
            prototype: name,
            on: CONFIG.prototypes[name].on,
            settings: decodeURIComponent(JSON.stringify(CONFIG.prototypes[name].settings))
          };
        }
      }
      location.search = decodeURIComponent(queryString.stringify(queryStringObj));
      return;
    }
    for (name in CONFIG.prototypes) {
      CONFIG.prototypes[name].on = qs.on === "true";
      for (setting in CONFIG.prototypes[name].settings) {
        CONFIG.prototypes[name].settings[setting] = settings[setting];
      }
    }
    $('#internalPrototype-overlay').remove();
    $overlay = $("<div id=\"internalPrototype-overlay\" style=\"\n    position: fixed; z-index: 9999; top: 0; bottom: 0; left: 0; right: 0;\n    background-color: rgba(0,0,0,0.8); cursor: pointer;\n\">\n    <style>\n        #internalPrototype {\n            margin: 12px 18px; padding: 1px 18px; background-color: #eee;\n            font: 14px helvetica, arial, sans-serif;\n            -webkit-user-select:none;\n            -khtml-user-select:none;\n            -moz-user-select:none;\n            -o-user-select:none;\n            user-select:none;\n            cursor: default;\n        }\n        #internalPrototype .nonstring {\n            font-style: italic;\n        }\n        #internalPrototype input, #internalPrototype label {\n            cursor: pointer;\n        }\n        #internalPrototype label {\n            margin: 6px 0;\n        }\n        #internalPrototype .internalPrototype-prototype:not(.forced) .internalPrototype-prototype-variant input,\n        #internalPrototype .internalPrototype-prototype:not(.forced) .internalPrototype-prototype-variant label {\n            cursor: default;\n            color: #999;\n        }\n        .internalPrototype-prototype {\n            margin: 12px 0;\n        }\n        .internalPrototype-prototype-name {\n            display: block\n        }\n        .internalPrototype-prototype-variant {\n            display: block;\n            margin-left: 18px\n        }\n    </style>\n    <div id=\"internalPrototype\">\n        <p><b>Prototypes (v1):</b></p>\n    </div>\n</div>");
    $overlay.on('click', function(e) {
      return $overlay.remove();
    });
    $internalPrototype = $overlay.find('#internalPrototype');
    $internalPrototype.on('click', function(e) {
      return e.stopPropagation();
    });
    prototypeIndex = 0;
    _ref = CONFIG.prototypes;
    for (prototypeName in _ref) {
      prototypeConfig = _ref[prototypeName];
      prototypeIndex += 1;
      $prototypeDiv = $("<div class=\"internalPrototype-prototype\">\n    <div class=\"internalPrototype-prototype-name\"><label>\n        <input type=\"checkbox\"> <span class=\"prototypename\"></span>:\n    </label></div>\n</div>");
      $prototypeDiv.find('.prototypename').text(prototypeName);
      $prototypeDiv.find('input[type=checkbox]').prop('checked', prototypeConfig.on);
      doneValues = [];
      for (value in prototypeConfig.settings) {
        if (__indexOf.call(doneValues, value) >= 0) {
          continue;
        }
        doneValues.push(value);
        labelText = typeof value === 'string' ? value : String(value);
        $settingDiv = $("<div class=\"internalPrototype-prototype-setting\"><label>\n    <span class=\"settingname\"></span>\n    <input type=\"text\" name=\"prototype-" + prototypeIndex + "-setting-text\" />\n</label></div>");
        $settingDiv.find('.settingname').addClass(typeof value !== 'string' ? 'nonstring' : void 0).text(labelText);
        $settingCheckbox = $settingDiv.find('input[type=checkbox]');
        $settingTextbox = $settingDiv.find('input[type=text]');
        $settingTextbox.val(prototypeConfig.settings[value]);
        $settingCheckbox.data('value', value).data('prototypeName', prototypeName);
        $settingDiv.appendTo($prototypeDiv);
      }
      $prototypeDiv.appendTo($internalPrototype);
    }
    $internalPrototype.append("<p style=\"font-size: smaller\">* currently active; <a href=\"#\" onclick=\"window.NYTD.InternalPrototype.reload(); return false\">reload</a> to apply changes</p>");
    $(document.body).append($overlay);
  })();

  return;

}).call(this);
